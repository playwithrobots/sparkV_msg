"""autogenerated by genmsg_py from sparkV.msg. Do not edit."""
import roslib.message
import struct


class sparkV(roslib.message.Message):
  _md5sum = "d1b538633f82d3557bdd285a8cfcf393"
  _type = "sparkV_msg/sparkV"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 LlS
uint8 ClS
uint8 RlS
uint8 Lir
uint8 Cir
uint8 Rir
uint8 bat
bool buz
uint16 tL
uint16 tR

"""
  __slots__ = ['LlS','ClS','RlS','Lir','Cir','Rir','bat','buz','tL','tR']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','bool','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       LlS,ClS,RlS,Lir,Cir,Rir,bat,buz,tL,tR
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(sparkV, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.LlS is None:
        self.LlS = 0
      if self.ClS is None:
        self.ClS = 0
      if self.RlS is None:
        self.RlS = 0
      if self.Lir is None:
        self.Lir = 0
      if self.Cir is None:
        self.Cir = 0
      if self.Rir is None:
        self.Rir = 0
      if self.bat is None:
        self.bat = 0
      if self.buz is None:
        self.buz = False
      if self.tL is None:
        self.tL = 0
      if self.tR is None:
        self.tR = 0
    else:
      self.LlS = 0
      self.ClS = 0
      self.RlS = 0
      self.Lir = 0
      self.Cir = 0
      self.Rir = 0
      self.bat = 0
      self.buz = False
      self.tL = 0
      self.tR = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_8B2H.pack(_x.LlS, _x.ClS, _x.RlS, _x.Lir, _x.Cir, _x.Rir, _x.bat, _x.buz, _x.tL, _x.tR))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.LlS, _x.ClS, _x.RlS, _x.Lir, _x.Cir, _x.Rir, _x.bat, _x.buz, _x.tL, _x.tR,) = _struct_8B2H.unpack(str[start:end])
      self.buz = bool(self.buz)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_8B2H.pack(_x.LlS, _x.ClS, _x.RlS, _x.Lir, _x.Cir, _x.Rir, _x.bat, _x.buz, _x.tL, _x.tR))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.LlS, _x.ClS, _x.RlS, _x.Lir, _x.Cir, _x.Rir, _x.bat, _x.buz, _x.tL, _x.tR,) = _struct_8B2H.unpack(str[start:end])
      self.buz = bool(self.buz)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_8B2H = struct.Struct("<8B2H")
