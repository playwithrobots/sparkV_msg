"""autogenerated by genmsg_py from velocity.msg. Do not edit."""
import roslib.message
import struct


class velocity(roslib.message.Message):
  _md5sum = "f612f835f16d75a4d12fb643e936e383"
  _type = "sparkV_msg/velocity"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool left
bool right
bool start
bool s2L
bool s1L
bool s0L
bool s2R
bool s1R
bool s0R



"""
  __slots__ = ['left','right','start','s2L','s1L','s0L','s2R','s1R','s0R']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       left,right,start,s2L,s1L,s0L,s2R,s1R,s0R
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(velocity, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.left is None:
        self.left = False
      if self.right is None:
        self.right = False
      if self.start is None:
        self.start = False
      if self.s2L is None:
        self.s2L = False
      if self.s1L is None:
        self.s1L = False
      if self.s0L is None:
        self.s0L = False
      if self.s2R is None:
        self.s2R = False
      if self.s1R is None:
        self.s1R = False
      if self.s0R is None:
        self.s0R = False
    else:
      self.left = False
      self.right = False
      self.start = False
      self.s2L = False
      self.s1L = False
      self.s0L = False
      self.s2R = False
      self.s1R = False
      self.s0R = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_9B.pack(_x.left, _x.right, _x.start, _x.s2L, _x.s1L, _x.s0L, _x.s2R, _x.s1R, _x.s0R))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.left, _x.right, _x.start, _x.s2L, _x.s1L, _x.s0L, _x.s2R, _x.s1R, _x.s0R,) = _struct_9B.unpack(str[start:end])
      self.left = bool(self.left)
      self.right = bool(self.right)
      self.start = bool(self.start)
      self.s2L = bool(self.s2L)
      self.s1L = bool(self.s1L)
      self.s0L = bool(self.s0L)
      self.s2R = bool(self.s2R)
      self.s1R = bool(self.s1R)
      self.s0R = bool(self.s0R)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_9B.pack(_x.left, _x.right, _x.start, _x.s2L, _x.s1L, _x.s0L, _x.s2R, _x.s1R, _x.s0R))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.left, _x.right, _x.start, _x.s2L, _x.s1L, _x.s0L, _x.s2R, _x.s1R, _x.s0R,) = _struct_9B.unpack(str[start:end])
      self.left = bool(self.left)
      self.right = bool(self.right)
      self.start = bool(self.start)
      self.s2L = bool(self.s2L)
      self.s1L = bool(self.s1L)
      self.s0L = bool(self.s0L)
      self.s2R = bool(self.s2R)
      self.s1R = bool(self.s1R)
      self.s0R = bool(self.s0R)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_9B = struct.Struct("<9B")
